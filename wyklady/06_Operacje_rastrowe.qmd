---
title: "Algorytmy danych geoprzestrzennych"
subtitle: "Operacje rastrowe"
author: "Krzysztof Dyba"
format: 
  revealjs:
    slide-number: c/t
    incremental: true
    embed-resources: true
css: _style.css
---

```{r}
library("terra")
```

## Co to jest raster? {style="text-align: center;"}

![](https://eoimages.gsfc.nasa.gov/images/imagerecords/144000/144225/campfire_oli_2018312_crop_lrg.jpg)

::: {style="font-size: 60%;"}
[Kalifornia (8 listopada 2018), Landsat 8](https://landsat.visibleearth.nasa.gov/)
:::

## Raster

**Raster** to jeden z rodzajów struktur danych wykorzystywanych do reprezentowania
danych geograficznych.

Jest to siatka (a dokładniej macierz) składająca się z kolumn, wierszy oraz
komórek. Każda komórka odpowiada pewnemu obszarowi geograficznemu, a jej wartość
przedstawia określoną charakterystykę, np. wysokość terenu, temperatura czy
typy siedlisk.

## Kontekst przestrzenny

Zasadniczo raster jest obrazem cyfrowym podobnym do fotografii czy rysunku.
Jednak to, co go wyróżnia to nadany kontekst przestrzenny definiowany przez:

::: {style="font-size: 90%;"}
- zakres przestrzenny -- wyznacza obszar geograficzny objęty przez raster,
określając granice obrazu we współrzędnych geograficznych.
- rozdzielczość przestrzenną -- określa rozmiar każdej komórki, np. rozdzielczość
1 metra oznacza, że każda komórka przedstawia obszar o wymiarach 1x1 metra w
terenie.
- układ przestrzenny -- system opisujący w jaki sposób lokalizacje na Ziemi są
odzworowane w dwuwymiarowym układzie współrzędnych.
:::

## Typy rastrów

W zależności od charakteru danych:

- jakościowe / kategoryczne (wartości dyskretne) -- komórki reprezentują klasy
czy grupy, np. klasy pokrycia terenu, typy gleb czy form geologicznych.
- ilościowe (wartości ciągłe) -- komórki przyjmują wartości z całego zakresu,
np. wysokość terenu, opad czy gęstość zaludnienia.

## Dane ilościowe

```{r}
f = system.file("ex/elev.tif", package = "terra")
r = rast(f)
plot(r, main = "Wysokość terenu [m n.p.m.]", mar = c(0, 0, 1.3, 0), axes = FALSE)
```

## Dane jakościowe

```{r}
rr = r
set.seed(1)
smp = sample(1:3, size = ncell(rr), replace = TRUE, prob = c(0.65, 0.3, 0.05))
values(rr) = smp
rr = mask(rr, r)
plot(rr, main = "Stopień degradacji gleby", col = c("forestgreen", "gold", "brown"),
     type = "classes", levels = c("Niski", "Średni", "Wysoki"),
     mar = c(0, 0, 1.3, 0), axes = FALSE)
```

## Typy danych

W zależności od zakresu wartości rastra i wymaganej precyzji można wykorzystać
różne typy danych, co ma istotny wpływ na rozmiar pliku wyjściowego oraz
wydajność obliczeń.

Zawsze należy starać się wybrać optymalny typ dla konkretnych zastosowań.

## Typy danych w GDAL

::: {style="font-size: 70%;"}

| **Typ danych** | **Wartość minimalna** | **Wartość maksymalna** |
|:--------------:|:---------------------:|:----------------------:|
|      Byte      |         $0$           |           $255$        |
|      Int8      |        $-128$         |           $127$        |
|     UInt16     |         $0$           |         $65,535$       |
|      Int16     |      $-32,768$        |         $32,767$       |
|     UInt32     |         $0$           |      $4,294,967,295$   |
|      Int32     |   $-2,147,483,648$    |      $2,147,483,647$   |
|     UInt64     |         $0$           |         $2^{64}$       |
|      Int64     |       $-2^{63}$       |         $2^{63}$       |
|     Float32    |    $-3.4*10^{38}$     |     $3.4*10^{38}$      |
|     Float64    |   $-1.8*10^{308}$     |    $1.8*10^{308}$      |

::: {style="text-align: center;"}
[GDAL](https://gdal.org/en/stable/user/raster_data_model.html)
:::

:::

## {.center}

::: {.fragment}
**1. W jaki sposób przechowywane są łańcuchy tekstu (kategorie), a jak wartości
logiczne?**
:::

::: {.fragment}
**2. Jaki typ danych jest najlepszy do ich zapisu?**
:::

## Typy rastrów

W zależności od złożoności struktury:

- jednokanałowe (dwa wymiary).
- wielokanałowe (trzy wymiary), np. zdjęcia multispektralne.
- wieloatrybutowe (wiele wymiarów), tzw. *hypercubes* -- może zawierać dodatkowo
wymiar czasu lub inne atrybuty, np. dane pochodzące z różnych sensorów.

## Struktura dwuwymiarowa

```{r}
r = rast(nrows = 10, ncols = 10, xmin = 0, xmax = 10, ymin = 0, ymax = 10,
         vals = 1:100)
plot(r, col = grey.colors(100, rev = TRUE), main = "Numer komórki", legend = FALSE)
text(r)
```

## Struktura dwuwymiarowa

```{r}
x = 1:10
y = 1:10
comb = expand.grid(x = x, y = y)
labels = paste0("[", comb$y, ", ", comb$x, "]")
```

```{r}
plot(r, col = grey.colors(100, rev = TRUE), main = "Indeks komórki [wiersz, kolumna]",
     legend = FALSE)
text(r, labels, cex = 0.7)
```

## Raster wielokanałowy

Mając trzy kanały odpowiadające kolorowi czerwonemu, zielonemu i niebieskiemu,
można stworzyć **kompozycję rastra**:

- w naturalnych barwach przedstawiającą rzeczywiste kolory widziane przez
ludzkie oko.
- w fałszywych barwach, gdzie kanały odpowiadają różnym długością fali
elektromagnetycznej, aby podkreślić określone cechy niewidoczne w rzeczywistych
kolorach.

## Raster wielokanałowy

```{r}
f = system.file("tif/L7_ETMs.tif", package = "stars")
r = rast(f)
plotRGB(r, 4, 3, 2, main = "Kompozycja bliskiej podczerwieni", mar = c(0, 0, 1.5, 0))
```

## Raster wieloatrybutowy

![](https://r-spatial.org/book/06-Cubes_files/figure-html/fig-cube4d2-1.png){fig-align="center"}

::: {style="font-size: 60%;"}
::: {style="text-align: center;"}
[Spatial Data Science With Applications in R (Edzer Pebesma, Roger Bivand)](https://r-spatial.org/book/06-Cubes.html)
:::
:::

## Typy rastrów

W zależności od ustawienia siatki komórek:

- regularne -- każda komórka ma ten sam rozmiar i kształt (zwykle kwadratowy lub
prostokątny).
- regularne obrócone -- siatka komórek obrócona jest o pewien kąt względem osi
współrzędnych (linie siatki nie są równoległe do osi X i Y).
- nieregularne (prostoliniowe, krzywoliniowe) -- komórki mają niereguralny kształt
lub zakrzywiony (raster rzutowany na elipsoidę). Stosowane są w
globalnych zbiorach danych, np. dane meteorologiczne w formacie *NetCDF* lub
*HDF*.

## Raster krzywoliniowy

![](https://r-spatial.github.io/stars/articles/stars4_files/figure-html/unnamed-chunk-24-1.png){fig-align="center"}

::: {style="font-size: 60%;"}
::: {style="text-align: center;"}
[Spatiotemporal Array Data Model (Edzer Pebesma)](https://r-spatial.github.io/stars/articles/stars4.html)
:::
:::

## Operacje rastrowe {style="text-align: center;" .center}

## Tworzenie rastra

```{r}
#| echo: true
set.seed(1)
smp = sample(1:10, size = 100, replace = TRUE)
mat = matrix(smp, nrow = 10, ncol = 10, byrow = TRUE)
mat
```

## Tworzenie rastra

```{r}
#| echo: true
raster = rast(mat, crs = "local", extent = ext(0, 10, 0, 10))
raster
```

\
\

::: {.fragment}
::: {style="text-align: center;"}
**Jak obliczyć rozdzielczość przestrzenną?**
:::
:::

## Tworzenie rastra

```{r}
plot(raster, col = heat.colors(100, rev = TRUE), main = "Wartości komórek")
text(raster)
```

## Algebra map

**Algebra map** to koncepcja traktowania map jako obiektów matematycznych,
które można przetwarzać za pomocą operacji matematycznych wykorzystując 
operatory arytmetyczne, porównawcze, logiczne czy funkcje matematyczne.

Założenia zostały opracowane przez amerykańskiego studenta architektury
krajobrazu Charlesa Dana Tomlina w latach 70 i są powszechnie stosowane
we współczesnym oprogramowaniu do analiz rastrowych.

## Algebra map

Działania mogą być podejmowane na czterech poziomach:

- operacje lokalne
- operacje ogniskowe
- operacje strefowe
- operacje globalne

## Operacje lokalne

## Skalowanie wartości
